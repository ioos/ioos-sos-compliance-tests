<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
  xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
  xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:ctlp="http://www.occamlab.com/te/parsers"
  xmlns:ioosSos="http://www.ioos.noaa.gov/sos"
  xmlns:ioosSosFn="http://www.ioos.noaa.gov/sos/functions"
  xmlns:getCapabilities="http://www.ioos.noaa.gov/sos/getCapabilities"
  xmlns:describeSensor="http://www.ioos.noaa.gov/sos/describeSensor"
  xmlns:getObservation="http://www.ioos.noaa.gov/sos/getObservation"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ows="http://www.opengis.net/ows/1.1" 
  xmlns:gml="http://www.opengis.net/gml" 
  xmlns:sos="http://www.opengis.net/sos/1.0"  
  xmlns:xml="http://www.w3.org/XML/1998/namespace"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:om="http://www.opengis.net/om/1.0"
  xmlns:saxon="http://saxon.sf.net/"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


  <ctl:suite name="ioosSos:ioosSos">
    <ctl:title>IOOS SOS test suite</ctl:title>
    <ctl:description>IOOS SOS test suite</ctl:description>
    <ctl:starting-test>ioosSos:main</ctl:starting-test>
  </ctl:suite>

  <ctl:test name="ioosSos:main">
    <ctl:param name="configFile" />
    <ctl:param name="rootDir" />
    <ctl:param name="tests" />
    <ctl:assertion>Test IOOS SOS implementation</ctl:assertion>
    <ctl:code>
      <xsl:variable name="testPattern" select="($tests, '.*')[1]" />
      <xsl:if test="$testPattern">
        <ctl:message select="concat('Running with test pattern: ', $testPattern)" />
      </xsl:if>
      <xsl:variable name="config">
        <xsl:choose>
          <xsl:when test="not($configFile)">
            <xsl:variable name="form-data">
              <ctl:form width="800" height="600">
                <div id="input-form" xmlns="http://www.w3.org/1999/xhtml">
                  <h2>IOOS SOS</h2>
                  <fieldset style="background:#ccffff">
                    <legend>IOOS SOS</legend>
                    <p>
                      <label class="form-label" for="uri">
                        <h4 style="margin-bottom: 0.5em">Location of note (absolute URI)</h4>
                        <p>e.g. file:///home/you/ioos-sos-config.xml or http://www.yoursite.org/test/ioos-sos-config.xml</p>
                      </label>
                      <input name="configFileUri" size="96" type="text" />
                    </p>
                    <p>
                      <label class="form-label" for="uploadedConfigFile">
                        <h4 style="margin-bottom: 0.5em">OR Upload config file</h4>
                      </label>
                      <input name="uploadedConfigFile" size="50" type="file" />
                    </p>
                  </fieldset>
                  <p>
                    <input class="form-button" type="submit" value="Start"/>
                    <input class="form-button" type="reset" value="Clear"/>
                  </p>
                </div>
              </ctl:form>
            </xsl:variable>
            <xsl:variable name="configFileUri" select="$form-data//value[@key='configFileiUri']" />
            <xsl:variable name="uploadedConfigFile" select="$form-data//value[@key='uploadedConfigFile']/ctl:file-entry" />
            <xsl:choose>
              <xsl:when test="(string-length($configFileUri) gt 0) and empty($uploadedConfigFile/@full-path)">
                <ctl:request>
                  <ctl:url>
                    <xsl:value-of select="$configFileUri"/>
                  </ctl:url>
                </ctl:request>
              </xsl:when>
              <xsl:otherwise>
                <xsl:copy-of select="doc(concat('file:///', $uploadedConfigFile/@full-path))" />
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:copy-of select="doc(concat('file:///', $configFile))" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="serviceUrl" select="$config/config/serviceUrl" />
      <xsl:variable name="schema.root" select="'xsd/ogc/'"/>
      <xsl:variable name="sos.version" select="'1.0.0'"/>       
      <xsl:variable name="ows.version" select="'1.1.0'"/>

      <xsl:choose>
        <xsl:when test="exists($serviceUrl)">
          <ctl:message select="concat('SOS service Url: ',$serviceUrl)"/>
          <ctl:call-test name="ioosSos:initiateTests">
            <ctl:with-param name="config" select="$config"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
            <ctl:with-param name="testPattern" select="$testPattern"/>
            <ctl:with-param name="serviceUrl" select="$serviceUrl"/>
            <ctl:with-param name="schemaRoot" select="$schema.root"/>
            <ctl:with-param name="sosVersion" select="$sos.version"/>
          </ctl:call-test>
        </xsl:when>
        <xsl:otherwise>
          <ctl:message>Failed to obtain SOS.</ctl:message>
          <ctl:fail/>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:test>

  <ctl:test name="ioosSos:initiateTests">
    <ctl:param name="config" />
    <ctl:param name="rootDir" />
    <ctl:param name="testPattern" />
    <ctl:param name="serviceUrl" />
    <ctl:param name="schemaRoot" />
    <ctl:param name="sosVersion" />
    <ctl:assertion>SOS offers services.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="capabilitiesSchema" select="sosFunctions:schemaPath($schemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd')" />
      <xsl:variable name="sensorMLSchema" select="sosFunctions:schemaPath($schemaRoot, '1.0.1', 'sensorML', 'sensorML.xsd')" />
      <xsl:variable name="omSchema" select="sosFunctions:schemaPath($schemaRoot, '1.0.0', 'om', 'om.xsd')" />

      <xsl:variable name="params">
        <ctl:param name="request">GetCapabilities</ctl:param>
        <ctl:param name="service">SOS</ctl:param> 
        <ctl:param name="AcceptVersions">1.0.0</ctl:param>
      </xsl:variable>

      <ctl:message select="concat('Sending GET request: ', ioosSosFn:createGetRequest($serviceUrl, $params))" />

      <xsl:variable name="capabilitiesDocument">
        <ctl:request>
          <ctl:url>
            <xsl:value-of select="$serviceUrl"/>
          </ctl:url>
          <ctl:method>get</ctl:method>  
          <xsl:copy-of select="$params" />
        </ctl:request>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="$capabilitiesDocument//*[local-name() = 'ExceptionReport']">
          <ctl:message>FAIL: GetCapabilites request resulted in an error.</ctl:message>
          <ctl:message select="ioosSosFn:getFullExceptionInfo($capabilitiesDocument)" />
          <ctl:fail />
        </xsl:when>
        <xsl:otherwise>
          <ctl:call-function name="ioosSosFn:validateXml">
            <ctl:with-param name="doc" select="$capabilitiesDocument"/>
            <ctl:with-param name="schemaFile" select="$capabilitiesSchema"/>
          </ctl:call-function>

          <!-- get procedures for DescribeSensor test, either from the config or by scanning offerings in Capabilities -->
          <xsl:variable name="describeSensorProcedures">
            <xsl:choose>
              <xsl:when test="$config/describeSensor/@checkAll = 'true'">
                <xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/sos:procedure">
                  <procedure><xsl:value-of select="@xlink:href" /></procedure>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$config/describeSensor/procedures/procedure">
                  <procedure><xsl:value-of select="." /></procedure>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable> 

          <!-- GET: GetCapabilities -->
          <ctl:call-test name="ioosSos:getCapabilities-get">
            <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument" />
            <ctl:with-param name="schema" select="$capabilitiesSchema" />
            <ctl:with-param name="testPattern" select="$testPattern" />
            <ctl:with-param name="rootDir" select="$rootDir" />
          </ctl:call-test>

          <!-- GET: DescribeSensor -->
          <ctl:call-test name="ioosSos:describeSensor-get">
            <ctl:with-param name="procedures" select="$describeSensorProcedures" />
            <ctl:with-param name="schema" select="$sensorMLSchema" />
            <ctl:with-param name="serviceUrl" select="$serviceUrl" />
            <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument" />
            <ctl:with-param name="testPattern" select="$testPattern" />
            <ctl:with-param name="rootDir" select="$rootDir" />
          </ctl:call-test>

          <!-- GET: GetObservation -->
          <ctl:call-test name="ioosSos:getObservation-get">
            <ctl:with-param name="getObservation" select="$config/getObservation" />
            <ctl:with-param name="schema" select="$omSchema" />
            <ctl:with-param name="serviceUrl" select="$serviceUrl" />
            <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument" />
            <ctl:with-param name="testPattern" select="$testPattern" />
            <ctl:with-param name="rootDir" select="$rootDir" />
          </ctl:call-test>

          <!-- POST: GetCapabilities -->
          <ctl:call-test name="ioosSos:getCapabilities-post">
            <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument" />
            <ctl:with-param name="schema" select="$capabilitiesSchema" />
            <ctl:with-param name="testPattern" select="$testPattern" />
            <ctl:with-param name="rootDir" select="$rootDir" />
          </ctl:call-test>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:test>

  <ctl:test name="ioosSos:getCapabilities-get">
    <ctl:param name="capabilitiesDocument" />
    <ctl:param name="schema" />
    <ctl:param name="testPattern" />
    <ctl:param name="rootDir" />
    <ctl:assertion>SOS offers valid GetCapabilities via GET.</ctl:assertion>
    <ctl:code>
      <!-- special case: we already have the GetCapabilties from a GET request, use it directly -->
      <ctl:call-test name="getCapabilities:allTests">
        <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument" />
        <ctl:with-param name="testPattern" select="$testPattern" />
        <ctl:with-param name="rootDir" select="$rootDir" />
      </ctl:call-test>
    </ctl:code>
  </ctl:test>

  <ctl:test name="ioosSos:describeSensor-get">
    <ctl:param name="procedures" />
    <ctl:param name="schema" />
    <ctl:param name="serviceUrl" />
    <ctl:param name="capabilitiesDocument" />
    <ctl:param name="testPattern" />
    <ctl:param name="rootDir" />

    <ctl:assertion>SOS offers valid DescribeSensor via GET.</ctl:assertion>
    <ctl:code>
      <xsl:for-each select="$procedures">
        <xsl:variable name="procedure" select="." />
        <ctl:message select="concat('Checking procedure: ', $procedure)" />

        <xsl:variable name="params">
          <ctl:param name="request">DescribeSensor</ctl:param>
          <ctl:param name="service">SOS</ctl:param> 
          <ctl:param name="version">1.0.0</ctl:param>
          <ctl:param name="procedure">
            <xsl:value-of select="encode-for-uri($procedure)" />
          </ctl:param>
          <ctl:param name="outputFormat">
            <xsl:value-of select="encode-for-uri('text/xml;subtype=&quot;sensorML/1.0.1/profiles/ioos_sos/1.0&quot;')" />
          </ctl:param>
        </xsl:variable>

        <ctl:message select="concat('Sending GET request: ', ioosSosFn:createGetRequest($serviceUrl, $params))" />

        <xsl:variable name="sensorMLDocument">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$serviceUrl"/>
            </ctl:url>
            <ctl:method>get</ctl:method>  
            <xsl:copy-of select="$params" />
          </ctl:request>
        </xsl:variable>

        <xsl:choose>
          <xsl:when test="$sensorMLDocument//*[local-name() = 'ExceptionReport']">
            <ctl:message>FAIL: DescribeSensor request resulted in an error.</ctl:message>
            <ctl:message select="ioosSosFn:getFullExceptionInfo($sensorMLDocument)" />
            <ctl:fail />
          </xsl:when>
          <xsl:otherwise>
            <ctl:call-function name="ioosSosFn:validateXml">
              <ctl:with-param name="doc" select="$sensorMLDocument"/>
              <ctl:with-param name="schemaFile" select="$schema"/>
            </ctl:call-function>

            <ctl:call-test name="describeSensor:allTests">
              <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
              <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument"/>
              <ctl:with-param name="testPattern" select="$testPattern"/>
              <ctl:with-param name="rootDir" select="$rootDir" />
            </ctl:call-test>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </ctl:code>
  </ctl:test>

  <ctl:test name="ioosSos:getObservation-get">
    <ctl:param name="getObservation" />
    <ctl:param name="schema" />
    <ctl:param name="serviceUrl" />
    <ctl:param name="capabilitiesDocument" />
    <ctl:param name="testPattern" />
    <ctl:param name="rootDir" />

    <ctl:assertion>SOS offers valid GetObservation via GET.</ctl:assertion>
    <ctl:code>
      <xsl:for-each select="$getObservation/getObservationConstellations/getObservationConstellation">
        <xsl:variable name="getObservationConstellation" select="." />
        <ctl:message select="ioosSosFn:getGetObservationConstellationInfo($getObservationConstellation)" />

        <xsl:variable name="params">
          <ctl:param name="request">GetObservation</ctl:param>
          <ctl:param name="service">SOS</ctl:param> 
          <ctl:param name="version">1.0.0</ctl:param>
          <ctl:param name="offering">
            <xsl:value-of select="encode-for-uri($getObservationConstellation/offering)" />
          </ctl:param>
          <xsl:for-each select="$getObservationConstellation/procedures/procedure">
            <ctl:param name="procedure">
              <xsl:value-of select="encode-for-uri(text())" />
            </ctl:param>
          </xsl:for-each>
          <xsl:for-each select="$getObservationConstellation/observedProperties/observedProperty">
            <ctl:param name="observedProperty">
              <xsl:value-of select="encode-for-uri(text())" />
            </ctl:param>
          </xsl:for-each>
          <xsl:if test="$getObservationConstellation/startTime and $getObservationConstellation/endTime">
            <ctl:param name="eventTime">
              <xsl:value-of select="encode-for-uri($getObservationConstellation/startTime)" />/<xsl:value-of select="encode-for-uri($getObservationConstellation/endTime)" />
            </ctl:param>
          </xsl:if>
          <ctl:param name="responseFormat">
            <xsl:value-of select="encode-for-uri('text/xml;subtype=&quot;om/1.0.0/profiles/ioos_sos/1.0&quot;')" />
          </ctl:param>
        </xsl:variable>

        <ctl:message select="concat('Sending GET request: ', ioosSosFn:createGetRequest($serviceUrl, $params))" />

        <xsl:variable name="observationCollectionDocument">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$serviceUrl"/>
            </ctl:url>
            <ctl:method>get</ctl:method>
            <xsl:copy-of select="$params" />
          </ctl:request>
        </xsl:variable>

        <xsl:choose>
          <xsl:when test="$observationCollectionDocument//*[local-name() = 'ExceptionReport']">
            <ctl:message>FAIL: GetObservation request resulted in an error.</ctl:message>
            <ctl:message select="ioosSosFn:getFullExceptionInfo($observationCollectionDocument)" />
            <ctl:fail />
          </xsl:when>
          <xsl:otherwise>
            <ctl:call-function name="ioosSosFn:validateXml">
              <ctl:with-param name="doc" select="$observationCollectionDocument"/>
              <ctl:with-param name="schemaFile" select="$schema"/>
            </ctl:call-function>

            <ctl:call-test name="getObservation:allTests">
              <ctl:with-param name="getObservationConstellation" select="$getObservationConstellation"/>
              <ctl:with-param name="observationCollectionDocument" select="$observationCollectionDocument"/>
              <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument"/>
              <ctl:with-param name="testPattern" select="$testPattern"/>
              <ctl:with-param name="rootDir" select="$rootDir" />
            </ctl:call-test>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </ctl:code>
  </ctl:test>

  <ctl:test name="ioosSos:getCapabilities-post">
    <ctl:param name="capabilitiesDocument" />
    <ctl:param name="schema" />
    <ctl:param name="testPattern" />
    <ctl:param name="rootDir" />
    <ctl:assertion>SOS offers valid GetCapabilities via POST.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="postUrl" select="sosFunctions:operationPostURL($capabilitiesDocument, 'GetCapabilities')" />
      <xsl:variable name="request">
        <sos:GetCapabilities
          xmlns:sos="http://www.opengis.net/sos/1.0"
          xmlns:ows="http://www.opengis.net/ows/1.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.opengis.net/sos/1.0 http://schemas.opengis.net/sos/1.0.0/sosGetCapabilities.xsd"
          service="SOS">
          <ows:AcceptVersions>
            <ows:Version>1.0.0</ows:Version>
          </ows:AcceptVersions>
        </sos:GetCapabilities>
      </xsl:variable>

      <xsl:choose>
        <xsl:when test="not($postUrl)">
          <ctl:message>WARNING: GetCapabilities POST requests are not support by service, not testing.</ctl:message>
        </xsl:when>
        <xsl:otherwise>

          <ctl:message select="concat('Sending POST request: ', $postUrl)" />
          <ctl:message select="saxon:serialize($request, '')" />

          <xsl:variable name="postCapabilitiesDocument">
            <ctl:request>
              <ctl:url>
                <xsl:value-of select="$postUrl" />
              </ctl:url>
              <ctl:method>post</ctl:method>
              <ctl:body>
                <xsl:copy-of select="$request" />
              </ctl:body>
            </ctl:request>
          </xsl:variable>

          <xsl:choose>
            <xsl:when test="$postCapabilitiesDocument//*[local-name() = 'ExceptionReport']">
              <ctl:message>FAIL: GetCapabilities request resulted in an error.</ctl:message>
              <ctl:message select="ioosSosFn:getFullExceptionInfo($postCapabilitiesDocument)" />
              <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
              <ctl:call-function name="ioosSosFn:validateXml">
                <ctl:with-param name="doc" select="$capabilitiesDocument"/>
                <ctl:with-param name="schemaFile" select="$schema"/>
              </ctl:call-function>

              <ctl:call-test name="getCapabilities:allTests">
                <ctl:with-param name="capabilitiesDocument" select="$postCapabilitiesDocument" />
                <ctl:with-param name="testPattern" select="$testPattern" />
                <ctl:with-param name="rootDir" select="$rootDir" />
              </ctl:call-test>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:test>
</ctl:package>
