<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
  xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:ioosSosFn="http://www.ioos.noaa.gov/sos/functions"
  xmlns:parsers="http://www.occamlab.com/te/parsers"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
  xmlns:gml="http://www.opengis.net/gml"
  xmlns:ows="http://www.opengis.net/ows/1.1"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <ctl:function name="ioosSosFn:validateXml">
    <ctl:param name="doc">doc</ctl:param>
    <ctl:param name="schemaFile">schemaFile</ctl:param>
    <ctl:description>Validate an XML document</ctl:description>
    <ctl:code>
      <ctl:message>Checking schema validity</ctl:message>
      <xsl:variable name="result">
        <ctl:call-function name="ioosSosFn:executeXmlValidator">
          <ctl:with-param name="doc">
            <xsl:copy-of select="$doc" />
          </ctl:with-param>
          <ctl:with-param name="instruction">
            <parsers:schemas>
              <parsers:schema type="resource">xsd/w3c/xml.xsd</parsers:schema>
              <parsers:schema type="resource">
                <xsl:value-of select="$schemaFile"/>
              </parsers:schema>
              <parsers:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</parsers:schema>
            </parsers:schemas>
          </ctl:with-param>
        </ctl:call-function>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$result/errors/error">
          <ctl:message>FAIL: Schema validation failed</ctl:message>
          <xsl:for-each select="$result/errors/error">
            <ctl:message select="concat('Validation error: ', .)" />
          </xsl:for-each>
          <ctl:fail />
        </xsl:when>
        <xsl:otherwise>
          <ctl:message>Schema check passed</ctl:message>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:executeXmlValidator">
    <ctl:param name="doc">document</ctl:param>
    <ctl:param name="instruction">instruction</ctl:param>
    <ctl:description>Execute XML validation</ctl:description>
    <ctl:java class="com.occamlab.te.parsers.XMLValidatingParser" 
          method="validateSingleResult" 
          initialized="true"/>
  </ctl:function>
  
  <ctl:function name="ioosSosFn:createGetRequest">
    <ctl:param name="url">Root request URL</ctl:param>
    <ctl:param name="params">ctl:param request parameters</ctl:param>
    <ctl:return>Assembled request URL with query params</ctl:return>
    <ctl:code>
       <xsl:value-of select="$url" />
       <xsl:if test="$params and $params/ctl:param">
         <xsl:value-of select="'?'" />
         <xsl:for-each select="$params/ctl:param">
            <xsl:value-of select="@name" /><xsl:value-of select="'='" /><xsl:value-of select="text()" />
            <xsl:if test="position() != last()">&amp;</xsl:if>
         </xsl:for-each>
       </xsl:if>
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:getFullExceptionInfo">
    <ctl:param name="exceptionReport">The exception report</ctl:param>
    <ctl:return>The Exception Code, Locator, and Text of an exception report</ctl:return>
    <ctl:code>
      <xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
      <xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
      <xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
      <xsl:variable name="textValue" select="$exceptionElement/ows:ExceptionText/text()" />
      <xsl:value-of select="concat('Exception Report (exceptionCode, locator, text): ', ioosSosFn:toString($exceptionReport//ows:ExceptionReport/ows:Exception), ', ', $locatorValue, ', ', $textValue)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:getGetObservationConstellationInfo">
    <ctl:param name="getObservationConstellation">The GetObservation constellation</ctl:param>
    <ctl:return>String representation of the GetObservation constellation</ctl:return>
    <ctl:code>
      <xsl:value-of select="concat('GetObservationConstellation (offering, procedures, observedProperties, startTime, endTime): ', ioosSosFn:toString($getObservationConstellation/offering), ', ', ioosSosFn:toString($getObservationConstellation/procedures), ', ', ioosSosFn:toString($getObservationConstellation/observedProperties), ', ', ioosSosFn:toString($getObservationConstellation/startTime), ', ', ioosSosFn:toString($getObservationConstellation/endTime))" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:toString">
    <ctl:param name="node" />
    <ctl:code>
      <xsl:choose>
        <xsl:when test="not($node)">[NONE]</xsl:when>
        <xsl:when test="count($node/*) > 0">[<xsl:for-each select="$node/*"><xsl:value-of select="ioosSosFn:toString(.)"/>,</xsl:for-each>]</xsl:when>
        <xsl:when test="not($node/text()) or normalize-space($node/text()) = ''">[EMPTY]</xsl:when>
        <xsl:otherwise><xsl:value-of select="normalize-space($node/text())" /></xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isFakeParameter">
    <ctl:param name="parameter" />
    <ctl:return>True/False depending on whether the input is a fake parameter</ctl:return>
    <ctl:code>
      <xsl:value-of select="starts-with($parameter, 'http://mmisw.org/ont/fake/parameter/') or $parameter = 'NONE'" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidParameter">
    <ctl:param name="parameter" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid CF or IOOS parameter</ctl:return>
    <ctl:code>
      <xsl:value-of select="ioosSosFn:isValidCfParameter($parameter, $rootDir)=true() or ioosSosFn:isValidIoosParameter($parameter, $rootDir)=true()" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosParameterShort">
    <ctl:param name="shortParameter" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid IOOS parameter (short)</ctl:return>
    <ctl:code>
      <xsl:variable name="fullParameter" select="concat('http://mmisw.org/ont/ioos/parameter/', $shortParameter)" />
      <xsl:value-of select="ioosSosFn:isValidIoosParameter($fullParameter, $rootDir)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosParameter">
    <ctl:param name="parameter" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid IOOS parameter</ctl:return>
    <ctl:code>
      <xsl:variable name="rdf" select="concat($rootDir, '/resources/rdf/ioos-parameter.rdf')" />
      <xsl:value-of select="ioosSosFn:isValidRdfTerm($parameter, $rdf)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidCfParameterShort">
    <ctl:param name="shortParameter" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid CF parameter (short)</ctl:return>
    <ctl:code>
      <xsl:variable name="fullParameter" select="concat('http://mmisw.org/ont/cf/parameter/', $shortParameter)" />
      <xsl:value-of select="ioosSosFn:isValidCfParameter($fullParameter, $rootDir)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidCfParameter">
    <ctl:param name="parameter" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid CF parameter</ctl:return>
    <ctl:code>
      <xsl:variable name="rdf" select="concat($rootDir, '/resources/rdf/cf-parameter.rdf')" />
      <xsl:value-of select="ioosSosFn:isValidRdfTerm($parameter, $rdf)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosOrganization">
    <ctl:param name="organization" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid IOOS organization</ctl:return>
    <ctl:code>
      <xsl:variable name="fullTerm" select="concat('http://mmisw.org/ont/ioos/organization/', $organization)" />
      <xsl:variable name="rdf" select="concat($rootDir, '/resources/rdf/ioos-organization.rdf')" />
      <xsl:value-of select="ioosSosFn:isValidRdfTerm($fullTerm, $rdf)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosPlatform">
    <ctl:param name="platform" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid IOOS platform</ctl:return>
    <ctl:code>
      <xsl:variable name="fullTerm" select="concat('http://mmisw.org/ont/ioos/platform/', $platform)" />
      <xsl:variable name="rdf" select="concat($rootDir, '/resources/rdf/ioos-platform.rdf')" />
      <xsl:value-of select="ioosSosFn:isValidRdfTerm($fullTerm, $rdf)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosSector">
    <ctl:param name="sector" />
    <ctl:param name="rootDir" />
    <ctl:return>True/False depending on whether the input is a valid IOOS sector</ctl:return>
    <ctl:code>
      <xsl:variable name="fullTerm" select="concat('http://mmisw.org/ont/ioos/sector/', $sector)" />
      <xsl:variable name="rdf" select="concat($rootDir, '/resources/rdf/ioos-sector.rdf')" />
      <xsl:value-of select="ioosSosFn:isValidRdfTerm($fullTerm, $rdf)" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidRdfTerm">
    <ctl:param name="term" />
    <ctl:param name="rdf" />
    <ctl:return>True/False depending on whether the input is a valid RDF term</ctl:return>
    <ctl:code>
      <xsl:value-of select="exists(document($rdf)//*[@rdf:about=$term])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIso8601Time">
    <ctl:param name="time" />
    <ctl:return>True/False depending on whether the input is a valid ISO8601 time</ctl:return>
    <ctl:code>
      <xsl:variable name="iso8601DateRegex" select="'^[1-2]\d{3}-[0-1]\d-[0-3]\dT[0-2]\d:[0-5]\d(:[0-5]\d)?(\.\d{1,3})?(Z|\+[0-1]\d:00)?$'"/>
      <xsl:value-of select="exists($time[matches(., $iso8601DateRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidUrl">
    <ctl:param name="url" />
    <ctl:return>True/False depending on whether the input is a valid URL</ctl:return>
    <ctl:code>
      <xsl:variable name="urlRegex" select="'https?://([-\w\.]+)+(:\d+)?(/([\w/_\.]*(\?\S+)?)?)?'"/>
      <xsl:value-of select="exists($url[matches(., $urlRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidIoosAssetUrn">
    <ctl:param name="asset" />
    <ctl:return>True/False depending on whether the input is a valid IOOS asset URN</ctl:return>
    <ctl:code>
      <xsl:variable name="ioosAssetUrnRegex" select="'^urn:ioos:(network|station|sensor)(:[A-Za-z0-9()+,\-.:=@;$_!*'']+){2,3}$'"/>
      <xsl:value-of select="exists($asset[matches(., $ioosAssetUrnRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isNetworkAsset">
    <ctl:param name="sml" />
    <ctl:return>True/False depending on whether the input is SensorML for an IOOS network</ctl:return>
    <ctl:code>
      <xsl:value-of select="starts-with($sml/sml:member[1]/sml:System/gml:name, 'urn:ioos:network')" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isStationAsset">
    <ctl:param name="sml" />
    <ctl:return>True/False depending on whether the input is SensorML for an IOOS station</ctl:return>
    <ctl:code>
      <xsl:value-of select="starts-with($sml/sml:member[1]/sml:System/gml:name, 'urn:ioos:station')" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isSensorAsset">
    <ctl:param name="sml" />
    <ctl:return>True/False depending on whether the input is SensorML for an IOOS sensor</ctl:return>
    <ctl:code>
      <xsl:value-of select="starts-with($sml/sml:member[1]/sml:System/gml:name, 'urn:ioos:sensor')" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidNetworkUrn">
    <ctl:param name="urn" />
    <ctl:return>True/False depending on whether the input is a valid IOOS network asset URN</ctl:return>
    <ctl:code>
      <xsl:variable name="ioosNetworkUrnRegex" select="'^urn:ioos:network(:[A-Za-z0-9()+,\-.:=@;$_!*'']+){2,2}$'"/>
      <xsl:value-of select="exists($urn[matches(., $ioosNetworkUrnRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidStationUrn">
    <ctl:param name="urn" />
    <ctl:return>True/False depending on whether the input is a valid IOOS station asset URN</ctl:return>
    <ctl:code>
      <xsl:variable name="ioosStationUrnRegex" select="'^urn:ioos:station(:[A-Za-z0-9()+,\-.:=@;$_!*'']+){2,2}$'"/>
      <xsl:value-of select="exists($urn[matches(., $ioosStationUrnRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidSensorUrn">
    <ctl:param name="urn" />
    <ctl:return>True/False depending on whether the input is a valid IOOS sensor asset URN</ctl:return>
    <ctl:code>
      <xsl:variable name="ioosSensorUrnRegex" select="'^urn:ioos:sensor(:[A-Za-z0-9()+,\-.:=@;$_!*'']+){3,3}$'"/>
      <xsl:value-of select="exists($urn[matches(., $ioosSensorUrnRegex)])" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidLatitude">
    <ctl:param name="lat" />
    <ctl:return>True/False depending on whether the input is a valid latitude</ctl:return>
    <ctl:code>
      <xsl:value-of select="$lat >= -90.0 and $lat &lt;= 90.0" />
    </ctl:code>
  </ctl:function>

  <ctl:function name="ioosSosFn:isValidLongitude">
    <ctl:param name="lng" />
    <ctl:return>True/False depending on whether the input is a valid longitude</ctl:return>
    <ctl:code>
      <xsl:value-of select="$lng >= -180.0 and $lng &lt;= 180.0" />
    </ctl:code>
  </ctl:function>
</ctl:package>
