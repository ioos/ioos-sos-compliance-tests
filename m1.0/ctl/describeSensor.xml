<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
  xmlns:describeSensor="http://www.ioos.noaa.gov/sos/describeSensor"
  xmlns:ioosSosFn="http://www.ioos.noaa.gov/sos/functions"
  xmlns:ctl="http://www.occamlab.com/ctl"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:ows="http://www.opengis.net/ows/1.1"
  xmlns:gml="http://www.opengis.net/gml"
  xmlns:sos="http://www.opengis.net/sos/1.0"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:om="http://www.opengis.net/om/1.0"
  xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
  xmlns:swe="http://www.opengis.net/swe/1.0.1"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ctl:test name="describeSensor:allTests">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="capabilitiesDocument"/>
    <ctl:param name="testPattern"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML is valid.</ctl:assertion>
    <ctl:code>
      <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.1', $testPattern)">
        <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.1">
          <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
        </ctl:call-test>
      </xsl:if>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.2', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.2">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.3', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.3">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="capabilitiesDocument" select="$capabilitiesDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.4', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.4">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.5', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.5">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
      </xsl:if>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true() or ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.6', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.6">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
      </xsl:if>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.7', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.7">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.8', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.8">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.9', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.9">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.10', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.10">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
      </xsl:if>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.11', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.11">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.12', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.12">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.13', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.13">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.14', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.14">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.15', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.15">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.16', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.16">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
        <xsl:if test="matches('describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.17', $testPattern)">
          <ctl:call-test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.17">
            <ctl:with-param name="sensorMLDocument" select="$sensorMLDocument"/>
            <ctl:with-param name="rootDir" select="$rootDir"/>
          </ctl:call-test>
        </xsl:if>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.1">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document provides ioosTemplateVersion value in the sml:capabilities [@name="ioosServiceMetadata"] element.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="ioosTemplateVersion" select="$sensorMLDocument/sml:capabilities[@name='ioosServiceMetadata']/swe:SimpleDataRecord/swe:field[@name='ioosTemplateVersion']"/>
      <xsl:choose>
        <xsl:when test="not($ioosTemplateVersion)">
          <ctl:message>FAIL: ioosTemplateVersion not found</ctl:message>
          <ctl:fail/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="text" select="$ioosTemplateVersion/swe:Text"/>
          <xsl:choose>
            <xsl:when test="not($text)">
              <ctl:message>FAIL: swe:Text not found</ctl:message>
              <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="not($text/@definition)">
                <ctl:message>FAIL: swe:Text doesn't have a definition</ctl:message>
                <ctl:fail/>
              </xsl:if>
              <xsl:choose>
                <xsl:when test="$text/swe:value">
                  <xsl:if test="$text/swe:value/text() != '1.0'">
                    <ctl:message>FAIL: swe:value should be "1.0" (or do we have a new version?)</ctl:message>
                    <ctl:fail/>
                  </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                  <ctl:message>FAIL: swe:Text has no swe:value</ctl:message>
                  <ctl:fail/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.2">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides valid reference to the EPSG::4326 CRS in a bounding box description gml:boundedBy/gml:Envelope [@srsName="http://www.opengis.net/def/crs/EPSG/0/4326"] element.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="gmlEnvelope" select="$sensorMLDocument/sml:member/sml:System/gml:boundedBy/gml:Envelope"/>
        <xsl:choose>
          <xsl:when test="not($gmlEnvelope)">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($gmlEnvelope/@srsName)">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$gmlEnvelope/@srsName = ''">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName is blank</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$gmlEnvelope/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'">
            <ctl:message>FAIL: gml:boundedBy/gml:Envelope/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.3">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="capabilitiesDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides valid networkID identifier, and the networkID: (a) has definition as sml:Term [@definition="http://mmisw.org/ont/ioos/definition/networkID"]; (b)  has a value as URN that conforms to the IOOS Conventions for Observing Asset Identifiers; and (c) matches the gml:name value in the sos:ObservationOffering for that network in the Capabilities document.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="smlIdentifier" select="$sensorMLDocument/sml:member/sml:System/sml:identification/sml:IdentifierList/sml:identifier[@name='networkID']"/>
        <xsl:variable name="ioosNetworkAssetUrnRegex" select="'^urn:ioos:network(:[A-Za-z0-9\._]+?){2,2}$'"/>
        <xsl:choose>
          <xsl:when test="not($smlIdentifier)">
            <ctl:message>FAIL: sml:Identifier[@name='networkID'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term)">
            <ctl:message>FAIL: sml:Identifier/sml:Term not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/networkID'])">
            <ctl:message>FAIL: sml:Identifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/networkID'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term/sml:value)">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not(matches($smlIdentifier/sml:Term/sml:value, $ioosNetworkAssetUrnRegex))">
            <ctl:message select="concat('FAIL: sml:Identifier/sml:Term/sml:value is not a valid IOOS network urn: ', $smlIdentifier/sml:Term/sml:value)"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($capabilitiesDocument/sos:Contents/sos:ObservationOfferingList/sos:ObservationOffering[gml:name = $smlIdentifier/sml:Term/sml:value])">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value does not exist as an sos:ObservationOffering in the Capabilites response</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.4">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides valid network shortName identifier, and the identifier has (a) definition as sml:Term [@definition="http://mmisw.org/ont/ioos/definition/shortName"]; and (b) a text string value.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="smlIdentifier" select="$sensorMLDocument/sml:member/sml:System/sml:identification/sml:IdentifierList/sml:identifier[@name='shortName']"/>
        <xsl:choose>
          <xsl:when test="not($smlIdentifier)">
            <ctl:message>FAIL: sml:Identifier[@name='shortName'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term)">
            <ctl:message>FAIL: sml:Identifier/sml:Term not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/shortName'])">
            <ctl:message>FAIL: sml:Identifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/shortName'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term/sml:value)">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$smlIdentifier/sml:Term/sml:value = ''">
            <ctl:message>FAIL: sml:Identifier/sml:Term/sml:value is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.5">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides valid network longName identifier, and the identifier has (a) definition as sml:Term [@definition="http://mmisw.org/ont/ioos/definition/longName"]; and (b) a text string value.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="smlIdentifier" select="$sensorMLDocument/sml:member/sml:System/sml:identification/sml:IdentifierList/sml:identifier[@name='longName']"/>
        <xsl:choose>
          <xsl:when test="not($smlIdentifier)">
            <ctl:message>FAIL: sml:identifier[@name='longName'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term)">
            <ctl:message>FAIL: sml:identifier/sml:Term not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/longName'])">
            <ctl:message>FAIL: sml:identifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/longName'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlIdentifier/sml:Term/sml:value)">
            <ctl:message>FAIL: sml:identifier/sml:Term/sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$smlIdentifier/sml:Term/sml:value = ''">
            <ctl:message>FAIL: sml:identifier/sml:Term/sml:value is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.6">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML response document provides for each network or station the reference to at least one parent network with IOOS codeSpace and RA Acronym value.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true() or ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="parentNetwork" select="$sensorMLDocument/sml:member/sml:System/sml:classification/sml:ClassifierList/sml:classifier[@name='parentNetwork']"/>
        <xsl:choose>
          <xsl:when test="not($parentNetwork)">
            <ctl:message>FAIL: sml:classifier[@name='parentNetwork'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($parentNetwork/sml:Term)">
            <ctl:message>FAIL: sml:classifier/sml:Term not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($parentNetwork/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/parentNetwork'])">
            <ctl:message>FAIL: sml:classifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/parentNetwork'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($parentNetwork/sml:Term/sml:value)">
            <ctl:message>FAIL: sml:classifier/sml:Term/sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$parentNetwork/sml:Term/sml:value = ''">
            <ctl:message>FAIL: sml:classifier/sml:Term/sml:value is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.7">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of station provides valid values for all following elements:  (a) /sml:SensorML/sml:member[1]/sml:System[1]/sml:contact/sml:ContactList/sml:member[@xlink:role#"http://mmisw.org/ont/ioos/definition/operator"]/sml:ResponsibleParty/sml:contactInfo/sml:address/sml:country;  (b) /sml:SensorML/sml:member[1]/sml:System[1]/sml:contact/sml:ContactList/sml:member[@xlink:role#"http://mmisw.org/ont/ioos/definition/publisher"]/sml:ResponsibleParty/sml:contactInfo/sml:address/sml:country;  (c) /sml:SensorML/sml:member[1]/sml:System[1]/sml:contact/sml:ContactList/sml:member[@xlink:role#"http://mmisw.org/ont/ioos/definition/operator"]/sml:ResponsibleParty/sml:contactInfo/sml:address/sml:electronicMailAddress;  (d) /sml:SensorML/sml:member[1]/sml:System[1]/sml:contact/sml:ContactList/sml:member[@xlink:role="http://mmisw.org/ont/ioos/definition/publisher"]/sml:ResponsibleParty/sml:contactInfo/sml:address/sml:electronicMailAddress</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="contactList" select="$sensorMLDocument/sml:member[1]/sml:System[1]/sml:contact/sml:ContactList"/>
        <xsl:variable name="operator" select="$contactList/sml:member[@xlink:role='http://mmisw.org/ont/ioos/definition/operator']"/>
        <xsl:variable name="publisher" select="$contactList/sml:member[@xlink:role='http://mmisw.org/ont/ioos/definition/publisher']"/>
        <xsl:variable name="operatorAddress" select="$operator/sml:ResponsibleParty/sml:contactInfo/sml:address"/>
        <xsl:variable name="publisherAddress" select="$publisher/sml:ResponsibleParty/sml:contactInfo/sml:address"/>
        <xsl:variable name="emailRegex" select="'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+(\.[A-Za-z0-9]+)+'"/>
        <xsl:choose>
          <xsl:when test="not($contactList)">
            <ctl:message>FAIL: sml:member[1]/sml:System[1]/sml:contact/sml:ContactList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operator)">
            <ctl:message>FAIL: operator not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisher)">
            <ctl:message>FAIL: publisher not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorAddress)">
            <ctl:message>FAIL: operator sml:ResponsibleParty/sml:contactInfo/sml:address not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherAddress)">
            <ctl:message>FAIL: publisher sml:ResponsibleParty/sml:contactInfo/sml:address not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorAddress/sml:country)">
            <ctl:message>FAIL: operator sml:address/sml:country not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$operatorAddress/sml:country = ''">
            <ctl:message>FAIL: operator sml:address/sml:country is blank</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherAddress/sml:country)">
            <ctl:message>FAIL: publisher sml:address/sml:country not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$publisherAddress/sml:country = ''">
            <ctl:message>FAIL: publisher sml:address/sml:country is blank</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorAddress/sml:electronicMailAddress)">
            <ctl:message>FAIL: operator sml:address/sml:electronicMailAddress not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$operatorAddress/sml:electronicMailAddress = ''">
            <ctl:message>FAIL: operator sml:address/sml:electronicMailAddress is blank</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherAddress/sml:electronicMailAddress)">
            <ctl:message>FAIL: publisher sml:address/sml:electronicMailAddress not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$publisherAddress/sml:electronicMailAddress = ''">
            <ctl:message>FAIL: publisher sml:address/sml:electronicMailAddress is blank</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not(matches($operatorAddress/sml:electronicMailAddress, $emailRegex))">
            <ctl:message>FAIL: operator sml:address/sml:electronicMailAddress is not a valid email address</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not(matches($publisherAddress/sml:electronicMailAddress, $emailRegex))">
            <ctl:message>FAIL: publisher sml:address/sml:electronicMailAddress is not a valid email address</ctl:message>
            <ctl:fail/>
          </xsl:when>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.8">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides a location of each network member station in sml:location/gml:Point [@srsName="http://www.opengis.net/def/crs/EPSG/0/4326" element with the values of latitude and longitude that are located within the spatial segment defined in the gml:boundedBy element.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="boundedBy" select="$sensorMLDocument/sml:member[1]/sml:System[1]/gml:boundedBy"/>
        <xsl:variable name="boundedByLowerCorner" select="$boundedBy/gml:Envelope/gml:lowerCorner"/>
        <xsl:variable name="boundedByUpperCorner" select="$boundedBy/gml:Envelope/gml:upperCorner"/>
        <xsl:variable name="boundedByMinLng" select="number(tokenize($boundedByLowerCorner/text(),' ')[1])"/>
        <xsl:variable name="boundedByMinLat" select="number(tokenize($boundedByLowerCorner/text(),' ')[2])"/>
        <xsl:variable name="boundedByMaxLng" select="number(tokenize($boundedByUpperCorner/text(),' ')[1])"/>
        <xsl:variable name="boundedByMaxLat" select="number(tokenize($boundedByUpperCorner/text(),' ')[2])"/>
        <xsl:variable name="componentList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:components/sml:ComponentList"/>
        <xsl:choose>
          <xsl:when test="not($boundedBy)">
            <ctl:message>FAIL: sml:member[1]/sml:System[1]/gml:boundedBy not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByLowerCorner)">
            <ctl:message>FAIL: gml:boundedByLowerCorner not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByUpperCorner)">
            <ctl:message>FAIL: gml:boundedByUpperCorner not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByMinLat)">
            <ctl:message>FAIL: gml:boundedByMinLat not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByMinLng)">
            <ctl:message>FAIL: gml:boundedByMinLng not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByMaxLat)">
            <ctl:message>FAIL: gml:boundedByMaxLat not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($boundedByMaxLng)">
            <ctl:message>FAIL: gml:boundedByMaxLng not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLatitude($boundedByMinLat) = false()">
            <ctl:message select="concat('FAIL: gml:boundedByMinLat (', $boundedByMinLat, ') is not a valid latitude')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLongitude($boundedByMinLng) = false()">
            <ctl:message select="concat('FAIL: gml:boundedByMinLng (', $boundedByMinLng, ') is not a valid longitude')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLatitude($boundedByMaxLat) = false()">
            <ctl:message select="concat('FAIL: gml:boundedByMaxLat (', $boundedByMaxLat, ') is not a valid latitude')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLongitude($boundedByMaxLng) = false()">
            <ctl:message select="concat('FAIL: gml:boundedByMaxLng (', $boundedByMaxLng, ') is not a valid longitude')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($componentList)">
            <ctl:message>FAIL: sml:ComponentList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($componentList/sml:component)">
            <ctl:message>FAIL: sml:ComponentList is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:for-each select="$componentList/sml:component">
              <xsl:variable name="componentSystem" select="sml:System"/>
              <xsl:variable name="componentLocation" select="$componentSystem/sml:location"/>
              <xsl:variable name="componentPoint" select="$componentLocation/gml:Point"/>
              <xsl:variable name="componentPos" select="$componentPoint/gml:pos"/>
              <xsl:variable name="componentPosLng" select="number(tokenize($componentPos/text(),' ')[1])"/>
              <xsl:variable name="componentPosLat" select="number(tokenize($componentPos/text(),' ')[2])"/>
              <xsl:choose>
                <xsl:when test="not($componentSystem)">
                  <ctl:message select="concat('FAIL: component sml:System not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentLocation)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:location not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentPoint)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:location/gml:Point not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="$componentPoint/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'">
                  <ctl:message select="concat('FAIL: component sml:System/sml:location/gml:Point/@srsName != http://www.opengis.net/def/crs/EPSG/0/4326 for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentPos)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:location/gml:Point/gml:pos not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentPosLat)">
                  <ctl:message select="concat('FAIL: component gml:pos latitude coordinate not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentPosLng)">
                  <ctl:message select="concat('FAIL: component gml:pos longitude coordinate not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="ioosSosFn:isValidLatitude($componentPosLat) = false()">
                  <ctl:message select="concat('FAIL: gml:pos latitude (', $componentPosLat, ') is not a valid latitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="ioosSosFn:isValidLongitude($componentPosLng) = false()">
                  <ctl:message select="concat('FAIL: gml:pos longitude (', $componentPosLng, ') is not a valid longitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="$componentPosLat &lt; $boundedByMinLat">
                  <ctl:message select="concat('FAIL: component gml:pos latitude is less than gml:boundedBy min latitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="$componentPosLat &gt; $boundedByMaxLat">
                  <ctl:message select="concat('FAIL: component gml:pos latitude is greater than gml:boundedBy max latitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="$componentPosLng &lt; $boundedByMinLng">
                  <ctl:message select="concat('FAIL: component gml:pos longitude coordinate is less than gml:boundedBy min longitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="$componentPosLng &gt; $boundedByMaxLng">
                  <ctl:message select="concat('FAIL: component gml:pos longitude coordinate is greater than gml:boundedBy max longitude for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                  <!-- great -->
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.9">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a network of stations provides a time range of observations for each network member station in sml:capabilities [@name="observationTimeRange"] element with a valid time value pair specifying a time range in ISO 8601 format.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="componentList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:components/sml:ComponentList"/>
        <xsl:choose>
          <xsl:when test="not($componentList)">
            <ctl:message>FAIL: sml:ComponentList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($componentList/sml:component)">
            <ctl:message>FAIL: sml:ComponentList is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:for-each select="$componentList/sml:component">
              <xsl:variable name="timeRangeCapabilities" select="sml:System/sml:capabilities[@name='observationTimeRange']"/>
              <xsl:variable name="timeRangeDataRecord" select="$timeRangeCapabilities/swe:DataRecord"/>
              <xsl:variable name="timeRangeSweField" select="$timeRangeDataRecord/swe:field[@name='observationTimeRange']"/>
              <xsl:variable name="timeRangeSweTimeRange" select="$timeRangeSweField/swe:TimeRange[@definition='http://mmisw.org/ont/ioos/swe_element_type/observationTimeRange']"/>
              <xsl:variable name="timeRangeValue" select="$timeRangeSweTimeRange/swe:value"/>
              <xsl:variable name="timeRangeStart" select="tokenize($timeRangeValue/text(),' ')[1]"/>
              <xsl:variable name="timeRangeEnd" select="tokenize($timeRangeValue/text(),' ')[2]"/>
              <xsl:choose>
                <xsl:when test="not($timeRangeCapabilities)">
                  <ctl:message select="concat('FAIL: component sml:capabilities[@name=observationTimeRange] not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($timeRangeDataRecord)">
                  <ctl:message select="concat('FAIL: component sml:capabilities[@name=observationTimeRange]/swe:DataRecord not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($timeRangeSweField)">
                  <ctl:message select="concat('FAIL: component swe:field[@name=observationTimeRange] not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($timeRangeSweTimeRange)">
                  <ctl:message select="concat('FAIL: component swe:TimeRange[@definition=http://mmisw.org/ont/ioos/swe_element_type/observationTimeRange] not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($timeRangeValue)">
                  <ctl:message select="concat('FAIL: component time swe:value not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="ioosSosFn:isValidIso8601Time($timeRangeStart) = false()">
                  <ctl:message select="concat('FAIL: component time swe:value start (', $timeRangeStart, ') is not a valid ISO 8601 date for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="ioosSosFn:isValidIso8601Time($timeRangeEnd) = false()">
                  <ctl:message select="concat('FAIL: component time swe:value end (', $timeRangeEnd, ') is not a valid ISO 8601 date for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                  <!-- great -->
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.10">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a network of stations provides definition of the observed properties for each network member station in sml:output [@name#"observed_Property"]/swe:Quantity [@definition="anyURI" elements, where anyURI is a reference to the IOOS vocabulary record.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isNetworkAsset($sensorMLDocument) = true()">
        <xsl:variable name="componentList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:components/sml:ComponentList"/>
        <xsl:choose>
          <xsl:when test="not($componentList)">
            <ctl:message>FAIL: sml:ComponentList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($componentList/sml:component)">
            <ctl:message>FAIL: sml:ComponentList is empty</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:for-each select="$componentList/sml:component">
              <xsl:variable name="componentName" select="@name"/>
              <xsl:variable name="smlOutputs" select="sml:System/sml:outputs"/>
              <xsl:variable name="smlOutputList" select="$smlOutputs/sml:OutputList"/>
              <xsl:choose>
                <xsl:when test="not($smlOutputs)">
                  <ctl:message select="concat('FAIL: component sml:outputs not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($smlOutputList)">
                  <ctl:message select="concat('FAIL: component sml:OutputList not found for component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($smlOutputList/sml:output)">
                  <ctl:message select="concat('FAIL: component sml:OutputList has no sml:outputs component ', @name)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:for-each select="$smlOutputList/sml:output">
                    <xsl:choose>
                      <xsl:when test="not(@name)">
                        <ctl:message select="concat('FAIL: swe:Quantity has no name component ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="not(swe:Quantity)">
                        <ctl:message select="concat('FAIL: swe:Quantity not found for sml:output ', @name, ' in component ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="not(swe:Quantity/@definition)">
                        <ctl:message select="concat('FAIL: swe:Quantity definition not found for sml:output ', @name, ' in component ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="ioosSosFn:isValidParameter(swe:Quantity/@definition, $rootDir) = false()">
                        <xsl:choose>
                          <xsl:when test="ioosSosFn:isFakeParameter(swe:Quantity/@definition) = true()">
                            <!--<ctl:message select="concat('WARNING: swe:Quantity definition (', swe:Quantity/@definition, ') is a fake parameter URL for sml:output ', @name, ' in component ', $componentName)"/>-->
                            <!--<ctl:warning/>-->
                          </xsl:when>
                          <xsl:otherwise>
                            <ctl:message select="concat('FAIL: swe:Quantity definition (', swe:Quantity/@definition, ') is not a valid parameter for sml:output ', @name, ' in component ', $componentName)"/>
                            <ctl:fail/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <!-- pass -->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:for-each>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.11">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a single station provides valid value of the sml:classifier [@name="platformType" element with the reference definition and IOOS codeSpace.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="classifierList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:classification/sml:ClassifierList"/>
        <xsl:variable name="platformTypeClassifier" select="$classifierList/sml:classifier[@name='platformType']"/>
        <xsl:variable name="platformTypeTerm" select="$platformTypeClassifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/platformType']"/>
        <xsl:variable name="platformTypeCodeSpace" select="$platformTypeTerm/sml:codeSpace[@xlink:href='http://mmisw.org/ont/ioos/platform']"/>
        <xsl:variable name="platformTypeValue" select="$platformTypeTerm/sml:value"/>
        <xsl:choose>
          <xsl:when test="not($classifierList)">
            <ctl:message>FAIL: sml:ClassifierList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($platformTypeClassifier)">
            <ctl:message>FAIL: sml:classifier[name='platformType'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($platformTypeTerm)">
            <ctl:message>FAIL: sml:Term[@definition='http://mmisw.org/ont/ioos/definition/platformType'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($platformTypeCodeSpace)">
            <ctl:message>FAIL: sml:codeSpace[xlink:href='http://mmisw.org/ont/ioos/platform'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($platformTypeValue)">
            <ctl:message>FAIL: platformType sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIoosPlatform($platformTypeValue/text(), $rootDir) = false()">
            <ctl:message select="concat('FAIL: platformType sml:value (', $platformTypeValue/text(), ') is not a valid IOOS platform type')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- pass -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.12">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a single station provides valid value of the sml:classifier [@name="operatorSector" element with the reference definition and IOOS codeSpace.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="classifierList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:classification/sml:ClassifierList"/>
        <xsl:variable name="operatorSectorClassifier" select="$classifierList/sml:classifier[@name='operatorSector']"/>
        <xsl:variable name="operatorSectorTerm" select="$operatorSectorClassifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/operatorSector']"/>
        <xsl:variable name="operatorSectorCodeSpace" select="$operatorSectorTerm/sml:codeSpace[@xlink:href='http://mmisw.org/ont/ioos/sector']"/>
        <xsl:variable name="operatorSectorValue" select="$operatorSectorTerm/sml:value"/>
        <xsl:choose>
          <xsl:when test="not($classifierList)">
            <ctl:message>FAIL: sml:ClassifierList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorSectorClassifier)">
            <ctl:message>FAIL: sml:classifier[name='operatorSector'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorSectorTerm)">
            <ctl:message>FAIL: sml:Term[@definition='http://mmisw.org/ont/ioos/definition/operatorSector'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorSectorCodeSpace)">
            <ctl:message>FAIL: sml:codeSpace[xlink:href='http://mmisw.org/ont/ioos/sector'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($operatorSectorValue)">
            <ctl:message>FAIL: operatorSector sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIoosSector($operatorSectorValue/text(), $rootDir) = false()">
            <ctl:message select="concat('FAIL: operatorSector sml:value (', $operatorSectorValue/text(), ') is not a valid IOOS sector')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- pass -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.13">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a single station provides valid value of the sml:classifier [@name="publisher" element with the reference definition and IOOS codeSpace.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="classifierList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:classification/sml:ClassifierList"/>
        <xsl:variable name="publisherClassifier" select="$classifierList/sml:classifier[@name='publisher']"/>
        <xsl:variable name="publisherTerm" select="$publisherClassifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/publisher']"/>
        <xsl:variable name="publisherCodeSpace" select="$publisherTerm/sml:codeSpace[@xlink:href='http://mmisw.org/ont/ioos/organization']"/>
        <xsl:variable name="publisherValue" select="$publisherTerm/sml:value"/>
        <xsl:choose>
          <xsl:when test="not($classifierList)">
            <ctl:message>FAIL: sml:ClassifierList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherClassifier)">
            <ctl:message>FAIL: sml:classifier[name='publisher'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherTerm)">
            <ctl:message>FAIL: sml:Term[@definition='http://mmisw.org/ont/ioos/definition/publisher'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherCodeSpace)">
            <ctl:message>FAIL: sml:codeSpace[xlink:href='http://mmisw.org/ont/ioos/organization'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($publisherValue)">
            <ctl:message>FAIL: publisher sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIoosOrganization($publisherValue/text(), $rootDir) = false()">
            <ctl:message select="concat('FAIL: publisher sml:value (', $publisherValue/text(), ') is not a valid IOOS organization')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- pass -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.14">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a single station provides valid value of the sml:classifier [@name="sponsor" element with the reference definition and IOOS codeSpace.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="classifierList" select="$sensorMLDocument/sml:member[1]/sml:System/sml:classification/sml:ClassifierList"/>
        <xsl:variable name="sponsorClassifier" select="$classifierList/sml:classifier[@name='sponsor']"/>
        <xsl:variable name="sponsorTerm" select="$sponsorClassifier/sml:Term[@definition='http://mmisw.org/ont/ioos/definition/sponsor']"/>
        <xsl:variable name="sponsorCodeSpace" select="$sponsorTerm/sml:codeSpace[@xlink:href='http://mmisw.org/ont/ioos/organization']"/>
        <xsl:variable name="sponsorValue" select="$sponsorTerm/sml:value"/>
        <xsl:choose>
          <xsl:when test="not($classifierList)">
            <ctl:message>FAIL: sml:ClassifierList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($sponsorClassifier)">
            <ctl:message>FAIL: sml:classifier[name='sponsor'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($sponsorTerm)">
            <ctl:message>FAIL: sml:Term[@definition='http://mmisw.org/ont/ioos/definition/sponsor'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($sponsorCodeSpace)">
            <ctl:message>FAIL: sml:codeSpace[xlink:href='http://mmisw.org/ont/ioos/organization'] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($sponsorValue)">
            <ctl:message>FAIL: sponsor sml:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIoosOrganization($sponsorValue/text(), $rootDir) = false()">
            <ctl:message select="concat('FAIL: sponsor sml:value (', $sponsorValue/text(), ') is not a valid IOOS organization')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- pass -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.15">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a single station provides a time range of observations for the station in sml:capabilities [@name="observationTimeRange"] element with a valid time value pair specifying a time range in ISO 8601 format.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="timeRangeCapabilities" select="$sensorMLDocument/sml:member[1]/sml:System/sml:capabilities[@name='observationTimeRange']"/>
        <xsl:variable name="timeRangeDataRecord" select="$timeRangeCapabilities/swe:DataRecord"/>
        <xsl:variable name="timeRangeSweField" select="$timeRangeDataRecord/swe:field[@name='observationTimeRange']"/>
        <xsl:variable name="timeRangeSweTimeRange" select="$timeRangeSweField/swe:TimeRange[@definition='http://mmisw.org/ont/ioos/swe_element_type/observationTimeRange']"/>
        <xsl:variable name="timeRangeValue" select="$timeRangeSweTimeRange/swe:value"/>
        <xsl:variable name="timeRangeStart" select="tokenize($timeRangeValue/text(),' ')[1]"/>
        <xsl:variable name="timeRangeEnd" select="tokenize($timeRangeValue/text(),' ')[2]"/>
        <xsl:choose>
          <xsl:when test="not($timeRangeCapabilities)">
            <ctl:message>FAIL: sml:capabilities[@name=observationTimeRange] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($timeRangeDataRecord)">
            <ctl:message>FAIL: sml:capabilities[@name=observationTimeRange]/swe:DataRecord not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($timeRangeSweField)">
            <ctl:message>FAIL: swe:field[@name=observationTimeRange] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($timeRangeSweTimeRange)">
            <ctl:message>FAIL: swe:TimeRange[@definition=http://mmisw.org/ont/ioos/swe_element_type/observationTimeRange] not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($timeRangeValue)">
            <ctl:message>FAIL: time swe:value not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIso8601Time($timeRangeStart) = false()">
            <ctl:message select="concat('FAIL: time swe:value start (', $timeRangeStart, ') is not a valid ISO 8601 date')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidIso8601Time($timeRangeEnd) = false()">
            <ctl:message select="concat('FAIL: time swe:value end (', $timeRangeEnd, ') is not a valid ISO 8601 date')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- great -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.16">
    <ctl:param name="sensorMLDocument"/>
    <ctl:assertion>SensorML document for a single station provides a location of the station in sml:location/gml:Point [@srsName="http://www.opengis.net/def/crs/EPSG/0/4326" element with the valid latitude and longitude value pair.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="smlSystem" select="$sensorMLDocument/sml:member[1]/sml:System"/>
        <xsl:variable name="smlLocation" select="$smlSystem/sml:location"/>
        <xsl:variable name="gmlPoint" select="$smlLocation/gml:Point"/>
        <xsl:variable name="gmlPos" select="$gmlPoint/gml:pos"/>
        <xsl:variable name="gmlPosLng" select="number(tokenize($gmlPos/text(),' ')[1])"/>
        <xsl:variable name="gmlPosLat" select="number(tokenize($gmlPos/text(),' ')[2])"/>
        <xsl:choose>
          <xsl:when test="not($smlSystem)">
            <ctl:message>FAIL: sml:System not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlLocation)">
            <ctl:message>FAIL: sml:System/sml:location not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($gmlPoint)">
            <ctl:message>FAIL: sml:System/sml:location/gml:Point not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="$gmlPoint/@srsName != 'http://www.opengis.net/def/crs/EPSG/0/4326'">
            <ctl:message>FAIL: sml:System/sml:location/gml:Point/@srsName != http://www.opengis.net/def/crs/EPSG/0/4326</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($gmlPos)">
            <ctl:message>FAIL: sml:System/sml:location/gml:Point/gml:pos not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($gmlPosLat)">
            <ctl:message>FAIL: gml:pos latitude coordinate not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($gmlPosLng)">
            <ctl:message>FAIL: gml:pos longitude coordinate not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLatitude($gmlPosLat) = false()">
            <ctl:message select="concat('FAIL: gml:pos latitude (', $gmlPosLat, ') is invalid')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="ioosSosFn:isValidLongitude($gmlPosLng) = false()">
            <ctl:message select="concat('FAIL: gml:pos longitude (', $gmlPosLng, ') is invalid')"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <!-- great -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:test name="describeSensor:IOOS-SOS.DescribeSensor-ResponseContainsValidOperationsMetadataProperty.17">
    <ctl:param name="sensorMLDocument"/>
    <ctl:param name="rootDir"/>
    <ctl:assertion>SensorML document for a single station provides a description of at least one sensor that is located at the station (platform), and for each sensor a "sensorID" and a list of the properties observed by this sensor are provided.</ctl:assertion>
    <ctl:code>
      <xsl:if test="ioosSosFn:isStationAsset($sensorMLDocument) = true()">
        <xsl:variable name="smlSystem" select="$sensorMLDocument/sml:member[1]/sml:System"/>
        <xsl:variable name="smlComponents" select="$smlSystem/sml:components"/>
        <xsl:variable name="smlComponentList" select="$smlComponents/sml:ComponentList"/>
        <xsl:choose>
          <xsl:when test="not($smlSystem)">
            <ctl:message>FAIL: sml:System not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlComponents)">
            <ctl:message>FAIL: sml:System/sml:components not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlComponentList)">
            <ctl:message>FAIL: sml:System/sml:components/sml:ComponentList not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:when test="not($smlComponentList/sml:component)">
            <ctl:message>FAIL: sml:System/sml:components/sml:ComponentList/sml:component not found</ctl:message>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:for-each select="$smlComponentList/sml:component">
              <xsl:variable name="componentName" select="@name"/>
              <xsl:variable name="componentSmlSystem" select="sml:System"/>
              <xsl:variable name="componentSmlIdentification" select="$componentSmlSystem/sml:identification"/>
              <xsl:variable name="componentSmlIdentificationHref" select="$componentSmlSystem/sml:identification/@xlink:href"/>
              <xsl:variable name="componentSmlOutputs" select="$componentSmlSystem/sml:outputs"/>
              <xsl:variable name="componentSmlOutputList" select="$componentSmlOutputs/sml:OutputList"/>
              <xsl:choose>
                <xsl:when test="not($componentSmlSystem)">
                  <ctl:message select="concat('FAIL: component sml:System not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentSmlIdentification)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:identification not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentSmlIdentificationHref)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:identification/@xlink:href not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="ioosSosFn:isValidSensorUrn($componentSmlIdentificationHref) = false()">
                  <ctl:message select="concat('FAIL: component sml:System/sml:identification/@xlink:href (', $componentSmlIdentificationHref, ') is not a valid IOOS sensor URN for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentSmlOutputs)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:outputs not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentSmlOutputList)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:outputs/sml:OutputList not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:when test="not($componentSmlOutputList/sml:output)">
                  <ctl:message select="concat('FAIL: component sml:System/sml:outputs/sml:OutputList/sml:output not found for ', $componentName)"/>
                  <ctl:fail/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:for-each select="$componentSmlOutputList/sml:output">
                    <xsl:variable name="outputName" select="@name"/>
                    <xsl:variable name="outputSweQuantity" select="swe:Quantity"/>
                    <xsl:variable name="outputSweQuantityDefinition" select="$outputSweQuantity/@definition"/>
                    <xsl:choose>
                      <xsl:when test="not($outputName)">
                        <ctl:message select="concat('FAIL: output @name not found in ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="not($outputSweQuantity)">
                        <ctl:message select="concat('FAIL: output swe:Quantity not found for output ', $outputName, ' in component ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="not($outputSweQuantityDefinition)">
                        <ctl:message select="concat('FAIL: output swe:Quantity/@definition not found for output ', $outputName, ' in component ', $componentName)"/>
                        <ctl:fail/>
                      </xsl:when>
                      <xsl:when test="ioosSosFn:isValidParameter($outputSweQuantityDefinition, $rootDir) = false()">
                        <xsl:choose>
                          <xsl:when test="ioosSosFn:isFakeParameter($outputSweQuantityDefinition) = true()">
                            <!--<ctl:message select="concat('WARNING: swe:Quantity definition (', $outputSweQuantityDefinition, ') is a fake parameter URL for sml:output ', $outputName, ' in component ', $componentName)"/>-->
                            <!--<ctl:warning/>-->
                          </xsl:when>
                          <xsl:otherwise>
                            <ctl:message select="concat('FAIL: swe:Quantity definition (', $outputSweQuantityDefinition, ') is not a valid parameter for sml:output ', $outputName, ' in component ', $componentName)"/>
                            <ctl:fail/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <!-- pass -->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:for-each>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:for-each>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </ctl:code>
  </ctl:test>
</ctl:package>
